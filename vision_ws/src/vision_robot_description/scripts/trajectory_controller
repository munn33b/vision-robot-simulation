#!/usr/bin/env python3

import rclpy
from rclpy.node import Node
from control_msgs.action import FollowJointTrajectory
from trajectory_msgs.msg import JointTrajectoryPoint
from sensor_msgs.msg import JointState
from rclpy.action import ActionClient

class JointTrajectoryActionClient(Node):

    def __init__(self):
        super().__init__('joint_trajectory_action_client')

        # Action client for FollowJointTrajectory action
        self._action_client = ActionClient(self, FollowJointTrajectory, '/real_robot/real_arm_controller/follow_joint_trajectory')

        # Wait for action server to be available before proceeding
        self.get_logger().info('Waiting for action server...')
        self._action_client.wait_for_server()
        self.get_logger().info('Action server available.')

        # Subscriber for /joint_states
        self._joint_state_sub = self.create_subscription(
            JointState,
            '/joint_states',
            self.joint_state_callback,
            10)
        self.latest_joint_positions = []

    def joint_state_callback(self, msg):
        # Save the latest joint positions from the /joint_states topic.
        # Make sure to have as many joint positions as required by the action.
        self.latest_joint_positions = list(msg.position)
        self.get_logger().info(f'Received joint states: {self.latest_joint_positions}')
        # Optionally, send these values as a goal.
        self.send_goal()

    def send_goal(self):
        if not self.latest_joint_positions:
            self.get_logger().info('No joint states received yet.')
            return

        goal_msg = FollowJointTrajectory.Goal()

        # Define the joint names for the trajectory.
        goal_msg.trajectory.joint_names = ['joint_1', 'joint_2', 'joint_3', 'joint_gripper_body']

        # Create a JointTrajectoryPoint and convert the joint positions to strings formatted with 6 decimals,
        # then back to float. This forces the values to have only 6 decimal places.
        point = JointTrajectoryPoint()
        rounded_positions = [
            float(f"{pos:.6f}") for pos in self.latest_joint_positions[:len(goal_msg.trajectory.joint_names)]
        ]
        point.positions = rounded_positions
        point.time_from_start.sec = 2  # 2 seconds to reach the goal

        # Append the point to the trajectory.
        goal_msg.trajectory.points.append(point)

        self.get_logger().info(f'Sending goal with positions: {point.positions}')
        self._action_client.send_goal_async(goal_msg, feedback_callback=self.feedback_callback).add_done_callback(self.goal_response_callback)

    def feedback_callback(self, feedback_msg):
        self.get_logger().info(f'Received feedback: {feedback_msg.feedback}')

    def goal_response_callback(self, future):
        goal_handle = future.result()
        if not goal_handle.accepted:
            self.get_logger().info('Goal rejected')
            return

        self.get_logger().info('Goal accepted')
        goal_handle.get_result_async().add_done_callback(self.get_result_callback)

    def get_result_callback(self, future):
        result = future.result().result
        self.get_logger().info(f'Goal result: {result}')

def main(args=None):
    rclpy.init(args=args)
    action_client = JointTrajectoryActionClient()

    # Spin the node so it can process incoming messages and action feedback.
    rclpy.spin(action_client)

    rclpy.shutdown()

if __name__ == '__main__':
    main()

