#!/usr/bin/env python3

import rclpy
from rclpy.node import Node
from control_msgs.action import FollowJointTrajectory
from trajectory_msgs.msg import JointTrajectoryPoint
from sensor_msgs.msg import JointState
from rclpy.action import ActionClient

class GripperActionClient(Node):

    def __init__(self):
        super().__init__('gripper_action_client')

        # Action client for the gripper action server
        self._action_client = ActionClient(
            self,
            FollowJointTrajectory,
            '/real_robot/real_gripper_controller/follow_joint_trajectory'
        )

        # Wait for the action server to be available before proceeding
        self.get_logger().info('Waiting for gripper action server...')
        self._action_client.wait_for_server()
        self.get_logger().info('Gripper action server available.')

        # Subscriber for /joint_states
        self._joint_state_sub = self.create_subscription(
            JointState,
            '/joint_states',
            self.joint_state_callback,
            10
        )

    def joint_state_callback(self, msg):
        # Check if the joint 'joint_gripper_left_link' is in the incoming message
        try:
            index = msg.name.index('joint_gripper_left_link')
        except ValueError:
            self.get_logger().warn("Joint 'joint_gripper_left_link' not found in /joint_states")
            return

        # Get the position for the gripper joint and convert it to 6 decimal places
        position = float(f"{msg.position[index]:.6f}")
        self.get_logger().info(f"Gripper joint position received: {position}")

        # Send the goal with this position
        self.send_goal(position)

    def send_goal(self, gripper_position):
        goal_msg = FollowJointTrajectory.Goal()

        # For the gripper, we typically have a single joint in the trajectory.
        goal_msg.trajectory.joint_names = ['joint_gripper_left_link']

        # Create a JointTrajectoryPoint with the gripper position
        point = JointTrajectoryPoint()
        point.positions = [gripper_position]
        point.time_from_start.sec = 1  # Adjust the duration as needed

        goal_msg.trajectory.points.append(point)

        self.get_logger().info(f"Sending gripper goal with position: {point.positions[0]}")
        self._action_client.send_goal_async(
            goal_msg,
            feedback_callback=self.feedback_callback
        ).add_done_callback(self.goal_response_callback)

    def feedback_callback(self, feedback_msg):
        self.get_logger().info(f"Gripper feedback: {feedback_msg.feedback}")

    def goal_response_callback(self, future):
        goal_handle = future.result()
        if not goal_handle.accepted:
            self.get_logger().info("Gripper goal rejected")
            return

        self.get_logger().info("Gripper goal accepted")
        goal_handle.get_result_async().add_done_callback(self.get_result_callback)

    def get_result_callback(self, future):
        result = future.result().result
        self.get_logger().info(f"Gripper goal result: {result}")

def main(args=None):
    rclpy.init(args=args)
    node = GripperActionClient()
    rclpy.spin(node)
    rclpy.shutdown()

if __name__ == '__main__':
    main()

